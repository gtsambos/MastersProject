import msprime
import sys
import numpy as np
import seaborn as sns
from IPython.display import SVG
import matplotlib.pyplot as plt

###Pairwise diversity with windows (Tajima's pi)###
def treediversity(ts,windows=[0,1]):
    stat = [0]*(len(windows)-1)
    n = ts.num_samples
    for tree in ts.trees():
        for site in tree.sites():
            position = site.position
            window_index = sum([windows[i] <= position for i in range(0,len(windows))])
            for mutation in site.mutations:
                #mut = mutation.site(mutation)
                #position = mut.position()
                x = tree.num_samples(mutation.node)
                f = x*(n-x)/(n*(n-1)/2)
                stat[window_index-1] += f/(windows[window_index]-windows[window_index-1])
    return(stat)

ts0 = msprime.simulate(5,mutation_rate = 0.1,recombination_rate=0,random_seed=5)
ts1 = msprime.simulate(5,mutation_rate = 0.1,recombination_rate=0.1,random_seed=6)
ts2 = msprime.simulate(30,mutation_rate = 2,recombination_rate=0.5,random_seed=7)
ts3 = msprime.simulate(105,mutation_rate = 2,recombination_rate=1,random_seed=8)
print(treediversity(ts0))
print(ts0.diversity())
print(treediversity(ts1))
print(ts1.diversity())
print(treediversity(ts2))
print(ts2.diversity())
windows = [0,0.4,0.5,1]
print(treediversity(ts3,windows=windows))
print(ts3.diversity(windows=windows))
windows = [0,0.2,0.33,0.5,0.7,0.9,1]
print(ts0.diversity(windows=windows))
print(treediversity(ts0,windows=windows))

###Tajima's D###
def TajimaD(ts):
    n = ts.num_samples
    a1 = sum([1/i for i in range(1,n)])
    b1 = (n+1)/(3*(n-1))
    c1 = b1 - 1/a1
    e1 = c1/a1
    a2 = sum([1/(i**2) for i in range(1,n)])
    b2 = 2*(n**2 + n + 3)/(9*n*(n-1))
    c2 = b2 - (n+2)/(a1*n) + a2/(a1**2)
    e2 = c2/(a1**2 + a2)
    S = ts.segregating_sites()
    theta_pi = treediversity(ts)
    theta_w = S/(a1)
    C = (e1*S + e2*S*(S-1))**(1/2)
    return((theta_pi-theta_w)/C)

pop_configs = [
    msprime.PopulationConfiguration(sample_size=5),
    msprime.PopulationConfiguration(sample_size=5)
]
M= np.array([
    [0,0.1],
    [0.2,0]
])
ts = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.2,recombination_rate=0.5,random_seed=6)
print(ts.Tajimas_D())
print(TajimaD(ts))
ts1 = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.4,recombination_rate=0.2,random_seed=6)
print(ts1.Tajimas_D())
print(TajimaD(ts1))
ts2 = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.2,recombination_rate=0.5,random_seed=6)
print(ts2.Tajimas_D())
print(TajimaD(ts2))
pop_configs = [
    msprime.PopulationConfiguration(sample_size=5),
    msprime.PopulationConfiguration(sample_size=5),
    msprime.PopulationConfiguration(sample_size=3),
    msprime.PopulationConfiguration(sample_size=7)
]
M= np.array([
    [0,0.1,0.5,0.2],
    [0.2,0,0,0],
    [0.1,0,0,0.5],
    [0.1,0.1,0.1,0]
])
ts3 = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 1,recombination_rate=0.3,random_seed=4)
print(ts3.Tajimas_D())
print(TajimaD(ts3))
ts4 = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.1,recombination_rate=0.4,random_seed=6)
print(ts4.Tajimas_D())
print(TajimaD(ts4))


###F2###
pop_configs = [
    msprime.PopulationConfiguration(sample_size=3),
    msprime.PopulationConfiguration(sample_size=4)
]
M= np.array([
    [0,0],
    [0.2,0]
])

ts = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.07,recombination_rate=0,random_seed=4)
for tree in ts.trees():
    node_colours={u: colour_map[tree.population(u)] for u in tree.nodes()}
    display(SVG(tree.draw(node_colours=node_colours)))
    
pop_configs = [
    msprime.PopulationConfiguration(sample_size=3),
    msprime.PopulationConfiguration(sample_size=3)
]
M= np.array([
    [0,0],
    [0.2,0]
])

ts = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.07,recombination_rate=0,random_seed=4)
for tree in ts.trees():
    node_colours={u: colour_map[tree.population(u)] for u in tree.nodes()}
    display(SVG(tree.draw(node_colours=node_colours)))
    print(ts.samples(10))
    
def F2(ts,pops,windows=[0,1]):
    stat = [0]*(len(windows)-1)
    n1 = len(pops[0])
    n2 = len(pops[1])
    for tree in ts.trees(tracked_samples=pops[0]):
        for site in tree.sites():
            position = site.position
            window_index = sum([windows[i] <= position for i in range(0,len(windows))])
            for mutation in site.mutations:
                x1 = 0
                x2 = 0
                for sample in tree.samples(mutation.node):
                    if sample in pops[0]:
                        x1 += 1
                    elif sample in pops[1]:
                        x2 += 1                
                f = (x1*(n2-x2) + x2*(n1-x1))/(n1*n2) - x1*(n1-x1)/(n1*(n1-1)) - x2*(n2-x2)/(n2*(n2-1))
                stat[window_index-1] += f/(windows[window_index]-windows[window_index-1])
    return(stat)
windows = [0,0.1,0.5,0.66,0.9,1]
pops = [[0,1,2],[3,4,5]]     
print(F2(ts,pops,windows=windows))
print(ts.f2(pops,windows=windows))

#F2 testing
pop_configs = [
    msprime.PopulationConfiguration(sample_size=100),
    msprime.PopulationConfiguration(sample_size=100)
]
M= np.array([
    [0,0.1],
    [0.2,0]
])
for i in range(1,1000):
    ts1 = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.7,recombination_rate=5,random_seed=i)
    print(F2(ts1,[range(0,100),range(100,200)]))
    #print(ts1.f2([range(0,100),range(100,200)]))
    
###F3###
pop_configs = [
    msprime.PopulationConfiguration(sample_size=3),
    msprime.PopulationConfiguration(sample_size=3),
    msprime.PopulationConfiguration(sample_size=4)
]
M = np.array([
    [0,0.1,0],
    [0.2,0,0],
    [0.1,0.2,0]
])

ts = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.7,recombination_rate=0.2,random_seed=2)
def F3(ts,pops,windows=[0,1]):
    n1 = len(pops[0])
    n2 = len(pops[1])
    n3 = len(pops[2])
    stat = [0]*(len(windows)-1)
    for tree in ts.trees(tracked_samples=pops[0]):
        for site in tree.sites():
            window_index = sum([windows[i] <= site.position for i in range(0,len(windows))])
            for mutation in site.mutations:
                x1 = 0
                x2 = 0
                x3 = 0
                for sample in tree.samples(mutation.node):
                    if sample in pops[0]:
                        x1 += 1
                    elif sample in pops[1]:
                        x2 += 1
                    elif sample in pops[2]:
                        x3 += 1
                f = (1/2)*((x1*(n2-x2) + x2*(n1-x1))/(n1*n2) + (x1*(n3-x3) + x3*(n1-x1))/(n1*n3) - (x2*(n3-x3) + x3*(n2-x2))/(n2*n3) - 2*x1*(n1-x1)/(n1*(n1-1)))
                #f = x1*(x1-1)*(n2-x2)*(n3-x3)/(n1*(n1-1)*n2*n3) - x1*(n1-x1)*(n2-x2)*x3/(n1*(n1-1)*n2*n3)
                stat[window_index - 1] += f/(windows[window_index]-windows[window_index-1])
    return(stat)
pops = [[0,1,2],[3,4,5],[6,7,8,9]] 
windows = [0,0.5,0.6,1]
print(F3(ts,pops,windows=windows))
print(ts.f3(pops,windows=windows))

###F4###

pop_configs = [
    msprime.PopulationConfiguration(sample_size=3),
    msprime.PopulationConfiguration(sample_size=3),
    msprime.PopulationConfiguration(sample_size=4),
    msprime.PopulationConfiguration(sample_size=4)
]
M = np.array([
    [0,0.1,0,0.1],
    [0.2,0,0.1,0],
    [0.1,0.2,0,0],
    [0.3,0.1,0,0]
])

ts = msprime.simulate(population_configurations=pop_configs,migration_matrix=M,mutation_rate = 0.6,recombination_rate=0.2,random_seed=3)
def F4(ts,pops,windows=[0,1]):
    n1 = len(pops[0])
    n2 = len(pops[1])
    n3 = len(pops[2])
    n4 = len(pops[3])
    stat = [0]*(len(windows)-1)
    for tree in ts.trees(tracked_samples=pops[0]):
        for site in tree.sites():
            window_index = sum([windows[i] <= site.position for i in range(0,len(windows))])
            for mutation in site.mutations:
                x1 = 0
                x2 = 0
                x3 = 0
                x4 = 0
                for sample in tree.samples(mutation.node):
                    if sample in pops[0]:
                        x1 += 1
                    elif sample in pops[1]:
                        x2 += 1
                    elif sample in pops[2]:
                        x3 += 1
                    elif sample in pops[3]:
                        x4 += 1
                f = (1/2)*((x1*(n4-x4) + x4*(n1-x1))/(n1*n4) + (x2*(n3-x3) + x3*(n2-x2))/(n2*n3) - (x1*(n3-x3) + x3*(n1-x1))/(n1*n3) - (x2*(n4-x4) + x4*(n2-x2))/(n2*n4))
                stat[window_index - 1] += f/(windows[window_index]-windows[window_index-1])
    return(stat)
pops = [[0,1,2],[3,4,5],[6,7,8,9],[10,11,12,13]] 
print(F4(ts,pops,windows=windows))
print(ts.f4(pops,windows=windows))

